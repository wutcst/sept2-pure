# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time

name: Java CI/CD with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Running Java ${{ matrix.java }} compile
    steps:
      # 使用checkout@v1进行CI/CD，只clone最新版本
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1

      # 安装JDK1.8
      - name: 安装 JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # 缓存Maven依赖
      - name: 缓存 Maven 依赖
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: mvn compile
        run: mvn compile

      - name: mvn package
        run: mvn -B package --file pom.xml -Dmaven.test.skip=true

      - name: 将 JAR 包部署到服务器
        uses: wlixcc/SFTP-Deploy-Action@v1.0
        with:
          username: ${{ secrets.SSH_USER }}
          server: ${{ secrets.HOST }}
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
          local_path: './target/zuul.jar'
          remote_path: '/usr/local/src/zuul/zuul.jar'
          args: '-o ConnectTimeout=5'

      - name: 停止服务器原有服务，后台运行zuul.jar
        if: always()
        uses: fifsky/ssh-action@master
        with:
          command: |
            ps -ef | grep "zuul.jar" | grep -v grep | awk '{print $2}' | xargs kill -9
            cd /usr/local/src/zuul
            nohup java -jar zuul.jar --spring.profiles.active=prod > nohup.out 2>&1 &
          host: ${{ secrets.HOST }}
          user: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}